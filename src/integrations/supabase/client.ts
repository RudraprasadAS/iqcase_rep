
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nytxdkvpgbvndtbvcvxz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im55dHhka3ZwZ2J2bmR0YnZjdnh6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczNjk0MDQsImV4cCI6MjA2Mjk0NTQwNH0.TpmAezgRrXiLaXFLVC98wPkY3hpV8y0Ogc_EatasxTQ";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create client with debug logging
const originalFetch = window.fetch;
window.fetch = function(input, init) {
  // Only log Supabase API calls
  if (typeof input === 'string' && input.includes('supabase')) {
    console.log('[Supabase Fetch]', {
      url: input,
      method: init?.method,
      headers: init?.headers
    });
    
    // Return the original fetch with timing
    const startTime = performance.now();
    return originalFetch.apply(this, [input, init])
      .then(response => {
        const duration = performance.now() - startTime;
        console.log(`[Supabase Response] Status: ${response.status}, Time: ${duration.toFixed(2)}ms`);
        return response;
      })
      .catch(error => {
        console.error('[Supabase Error]', error);
        throw error;
      });
  }
  
  // For non-Supabase calls, just use the original fetch
  return originalFetch.apply(this, [input, init]);
};

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
